# Backstage override configuration for your local development environment
# Add any local overrides here

# GitHub OAuth Configuration
# To set up GitHub authentication:
# 1. Go to: https://github.com/settings/applications/new
# 2. Application name: Backstage Local Dev
# 3. Homepage URL: http://localhost:3000
# 4. Authorization callback URL: http://localhost:7007/api/auth/github/handler/frame
# 5. After creating the app, replace the values below with your actual credentials
# 6. Alternatively, set environment variables AUTH_GITHUB_CLIENT_ID and AUTH_GITHUB_CLIENT_SECRET

auth:
  providers:
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        # Optional: Request additional scopes
        additionalScopes:
          - read:user
          - user:email
        # Note: We're using a custom resolver in backend/src/index.ts
        # No need for built-in resolvers since our custom one handles everything

# Local overrides: point Backstage Keycloak plugin to remote Keycloak
# Do NOT commit secrets; provide them via environment variables.

keycloak:
  # Choose profile with env var, defaults to remote-user
  activeProfile: ${KEYCLOAK_PROFILE:remote-user}
  profiles:
    # Remote Keycloak using a real user (password grant)
    remote-user:
      baseUrl: https://keycloak-test.cyber.npr-plscyb.asgard.capi/auth
      realm: master
      clientId: admin-cli
      username: ${KEYCLOAK_USERNAME}
      password: ${KEYCLOAK_PASSWORD}

    # Remote Keycloak using a service account (client credentials grant)
    remote-service:
      baseUrl: https://keycloak-test.cyber.npr-plscyb.asgard.capi/auth
      realm: master
      clientId: sauron
      clientSecret: ${KEYCLOAK_CLIENT_SECRET}

    # Local development Keycloak
    local:
      baseUrl: http://localhost:8080
      realm: master
      clientId: admin-cli
      username: admin
      password: admin
